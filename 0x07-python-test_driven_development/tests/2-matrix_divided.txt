The module "2-matrix_divided"
=============================

Usage
------------------------------

To begin, import the "matrix_divided" function from the "2-matrix_divided" module:
::

	>>> matrix_divided = __import__("2-matrix_divided").matrix_divided

Now you can use the function by passing a matrix and a divisor as arguments:
::

	>>> matrix_divided([[1, 2], [3, 4]], 2)
	[[0.5, 1.0], [1.5, 2.0]]


The function throws a TypeError if the first argument is not a list. For example:
::

	>>> matrix_divided((1, 2), 2)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Another TypeError is raised if the first argument is a list containing lists of different lengths:
::

	>>> matrix_divided([[1, 2], [1, 2, 3]], 2)
	Traceback (most recent call last):
	...
	TypeError: Each row of the matrix must have the same size

If the first argument is not a list of lists containing only integers or floats, a TypeError is thrown:
::

	>>> matrix_divided([[3, 4], [1, 2], ["a", 5]], 2)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

A TypeError occurs if the second argument is not an integer or float:
::

	>>> matrix_divided([[3, 4], [1, 2]], "2")
	Traceback (most recent call last):
	...
	TypeError: div must be a number

If the second argument is zero, a ZeroDivisionError is raised due to division by zero:
::

	>>> matrix_divided([[3, 4], [1, 2]], 0)
	Traceback (most recent call last):
	...
	ZeroDivisionError: division by zero

If no arguments are provided, a TypeError is thrown indicating the missing arguments:
::

	>>> matrix_divided()
	Traceback (most recent call last):
	...
	TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

Similarly, if the second argument is not provided, a TypeError is raised:
::

	>>> matrix_divided([])
	Traceback (most recent call last):
	...
	TypeError: matrix_divided() missing 1 required positional argument: 'div'
